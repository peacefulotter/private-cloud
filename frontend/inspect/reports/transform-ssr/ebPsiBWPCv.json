{"resolvedId":"/home/edge/dev/js/private-cloud/src/routes/login.tsx","transforms":[{"name":"__load__","result":"import { Show } from \"solid-js\";\nimport { useParams, useRouteData } from \"solid-start\";\nimport { FormError } from \"solid-start/data\";\nimport {\n  createServerAction$,\n  createServerData$,\n  redirect,\n} from \"solid-start/server\";\nimport { db } from \"~/db\";\nimport { createUserSession, getUser, login, register } from \"~/db/session\";\n\nfunction validateUsername(username: unknown) {\n  if (typeof username !== \"string\" || username.length < 4) {\n    return `Usernames must be at least 4 characters long`;\n  }\n}\n\nfunction validatePassword(password: unknown) {\n  if (typeof password !== \"string\" || password.length < 10) {\n    return `Passwords must be at least 10 characters long`;\n  }\n}\n\nexport function routeData() {\n  return createServerData$(async (_, { request }) => {\n    if (await getUser(request)) {\n      throw redirect(\"/\");\n    }\n    return {};\n  });\n}\n\nexport default function Login() {\n  const data = useRouteData<typeof routeData>();\n  const params = useParams();\n\n  const [loggingIn, { Form }] = createServerAction$(async (form: FormData) => {\n    const loginType = form.get(\"loginType\");\n    const username = form.get(\"username\");\n    const password = form.get(\"password\");\n    const redirectTo = form.get(\"redirectTo\") || \"/\";\n    if (\n      typeof loginType !== \"string\" ||\n      typeof username !== \"string\" ||\n      typeof password !== \"string\" ||\n      typeof redirectTo !== \"string\"\n    ) {\n      throw new FormError(`Form not submitted correctly.`);\n    }\n\n    const fields = { loginType, username, password };\n    const fieldErrors = {\n      username: validateUsername(username),\n      password: validatePassword(password),\n    };\n    if (Object.values(fieldErrors).some(Boolean)) {\n      throw new FormError(\"Fields invalid\", { fieldErrors, fields });\n    }\n\n    switch (loginType) {\n      case \"login\": {\n        const user = await login({ username, password });\n        if (!user) {\n          throw new FormError(`Username/Password combination is incorrect`, {\n            fields,\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n      case \"register\": {\n        const userExists = await db.user.findUnique({ where: { username } });\n        if (userExists) {\n          throw new FormError(`User with username ${username} already exists`, {\n            fields,\n          });\n        }\n        const user = await register({ username, password });\n        if (!user) {\n          throw new FormError(\n            `Something went wrong trying to create a new user.`,\n            {\n              fields,\n            }\n          );\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n      default: {\n        throw new FormError(`Login type invalid`, { fields });\n      }\n    }\n  });\n\n  return (\n    <main>\n      <h1>Login</h1>\n      <Form>\n        <input\n          type=\"hidden\"\n          name=\"redirectTo\"\n          value={params.redirectTo ?? \"/\"}\n        />\n        <fieldset>\n          <legend>Login or Register?</legend>\n          <label class=\"text-red-500\">\n            <input class=\"text-red-500\" type=\"radio\" name=\"loginType\" value=\"login\" checked={true} />{\" \"}\n            Login\n          </label>\n          <label>\n            <input type=\"radio\" name=\"loginType\" value=\"register\" /> Register\n          </label>\n        </fieldset>\n        <div>\n          <label for=\"username-input\">Username</label>\n          <input name=\"username\" placeholder=\"kody\" />\n        </div>\n        <Show when={loggingIn.error?.fieldErrors?.username}>\n          <p role=\"alert\">{loggingIn.error.fieldErrors.username}</p>\n        </Show>\n        <div>\n          <label for=\"password-input\">Password</label>\n          <input name=\"password\" type=\"password\" placeholder=\"twixrox\" />\n        </div>\n        <Show when={loggingIn.error?.fieldErrors?.password}>\n          <p role=\"alert\">{loggingIn.error.fieldErrors.password}</p>\n        </Show>\n        <Show when={loggingIn.error}>\n          <p role=\"alert\" id=\"error-message\">\n            {loggingIn.error.message}\n          </p>\n        </Show>\n        <button type=\"submit\">{data() ? \"Login\" : \"\"}</button>\n      </Form>\n    </main>\n  );\n}\n","start":1675684142422,"end":1675684142422},{"name":"solid-start-file-system-router","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<input\", \" type=\\\"hidden\\\" name=\\\"redirectTo\\\"\", \">\"],\n  _tmpl$2 = [\"<fieldset\", \"><legend>Login or Register?</legend><label class=\\\"text-red-500\\\"><input class=\\\"text-red-500\\\" type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"login\\\"\", \"> Login</label><label><input type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"register\\\"> Register</label></fieldset>\"],\n  _tmpl$3 = [\"<div\", \"><label for=\\\"username-input\\\">Username</label><input name=\\\"username\\\" placeholder=\\\"kody\\\"></div>\"],\n  _tmpl$4 = [\"<p\", \" role=\\\"alert\\\">\", \"</p>\"],\n  _tmpl$5 = [\"<div\", \"><label for=\\\"password-input\\\">Password</label><input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"twixrox\\\"></div>\"],\n  _tmpl$6 = [\"<p\", \" role=\\\"alert\\\" id=\\\"error-message\\\">\", \"</p>\"],\n  _tmpl$7 = [\"<button\", \" type=\\\"submit\\\">\", \"</button>\"],\n  _tmpl$8 = [\"<main\", \"><h1>Login</h1><!--#-->\", \"<!--/--></main>\"];\nimport \"solid-start/data\";\nimport { createRouteAction } from \"solid-start/data\";\nimport server$ from \"solid-start/server\";\nimport { Show } from \"solid-js\";\nimport { useParams, useRouteData } from \"solid-start\";\nimport { FormError } from \"solid-start/data\";\nimport { redirect } from \"solid-start/server\";\nimport { db } from \"~/db\";\nimport { createUserSession, getUser, login, register } from \"~/db/session\";\nfunction validateUsername(username) {\n  if (typeof username !== \"string\" || username.length < 4) {\n    return `Usernames must be at least 4 characters long`;\n  }\n}\nfunction validatePassword(password) {\n  if (typeof password !== \"string\" || password.length < 10) {\n    return `Passwords must be at least 10 characters long`;\n  }\n}\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(_, {\n  request\n}) {\n  const $$ctx = this;\n  if (await getUser(request)) {\n    throw redirect(\"/\");\n  }\n  return {};\n}, \"/_m/src/routes/login.tsx/0/routeData\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/0/routeData\", $$server_module0);\nconst $$server_module1 = server$.createHandler(async function $$serverHandler1(form) {\n  const $$ctx = this;\n  const loginType = form.get(\"loginType\");\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  const redirectTo = form.get(\"redirectTo\") || \"/\";\n  if (typeof loginType !== \"string\" || typeof username !== \"string\" || typeof password !== \"string\" || typeof redirectTo !== \"string\") {\n    throw new FormError(`Form not submitted correctly.`);\n  }\n  const fields = {\n    loginType,\n    username,\n    password\n  };\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password)\n  };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    throw new FormError(\"Fields invalid\", {\n      fieldErrors,\n      fields\n    });\n  }\n  switch (loginType) {\n    case \"login\":\n      {\n        const user = await login({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Username/Password combination is incorrect`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    case \"register\":\n      {\n        const userExists = await db.user.findUnique({\n          where: {\n            username\n          }\n        });\n        if (userExists) {\n          throw new FormError(`User with username ${username} already exists`, {\n            fields\n          });\n        }\n        const user = await register({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Something went wrong trying to create a new user.`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    default:\n      {\n        throw new FormError(`Login type invalid`, {\n          fields\n        });\n      }\n  }\n}, \"/_m/src/routes/login.tsx/1/loggingIn\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/1/loggingIn\", $$server_module1);\nexport default function Login() {\n  const data = useRouteData();\n  const params = useParams();\n  const [loggingIn, {\n    Form\n  }] = createRouteAction($$server_module1);\n  return _$ssr(_tmpl$8, _$ssrHydrationKey(), _$escape(_$createComponent(Form, {\n    get children() {\n      return [_$ssr(_tmpl$, _$ssrHydrationKey(), _$ssrAttribute(\"value\", _$escape(params.redirectTo, true) ?? \"/\", false)), _$ssr(_tmpl$2, _$ssrHydrationKey(), _$ssrAttribute(\"checked\", true, true)), _$ssr(_tmpl$3, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.username;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.username));\n        }\n      }), _$ssr(_tmpl$5, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.password;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.password));\n        }\n      }), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error;\n        },\n        get children() {\n          return _$ssr(_tmpl$6, _$ssrHydrationKey(), _$escape(loggingIn.error.message));\n        }\n      }), _$ssr(_tmpl$7, _$ssrHydrationKey(), data() ? \"Login\" : \"\")];\n    }\n  })));\n}","start":1675684142422,"end":1675684142474,"order":"pre"},{"name":"solid","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<input\", \" type=\\\"hidden\\\" name=\\\"redirectTo\\\"\", \">\"],\n  _tmpl$2 = [\"<fieldset\", \"><legend>Login or Register?</legend><label class=\\\"text-red-500\\\"><input class=\\\"text-red-500\\\" type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"login\\\"\", \"> Login</label><label><input type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"register\\\"> Register</label></fieldset>\"],\n  _tmpl$3 = [\"<div\", \"><label for=\\\"username-input\\\">Username</label><input name=\\\"username\\\" placeholder=\\\"kody\\\"></div>\"],\n  _tmpl$4 = [\"<p\", \" role=\\\"alert\\\">\", \"</p>\"],\n  _tmpl$5 = [\"<div\", \"><label for=\\\"password-input\\\">Password</label><input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"twixrox\\\"></div>\"],\n  _tmpl$6 = [\"<p\", \" role=\\\"alert\\\" id=\\\"error-message\\\">\", \"</p>\"],\n  _tmpl$7 = [\"<button\", \" type=\\\"submit\\\">\", \"</button>\"],\n  _tmpl$8 = [\"<main\", \"><h1>Login</h1><!--#-->\", \"<!--/--></main>\"];\nimport \"solid-start/data\";\nimport { createRouteAction } from \"solid-start/data\";\nimport server$ from \"solid-start/server\";\nimport { Show } from \"solid-js\";\nimport { useParams, useRouteData } from \"solid-start\";\nimport { FormError } from \"solid-start/data\";\nimport { redirect } from \"solid-start/server\";\nimport { db } from \"~/db\";\nimport { createUserSession, getUser, login, register } from \"~/db/session\";\nfunction validateUsername(username) {\n  if (typeof username !== \"string\" || username.length < 4) {\n    return `Usernames must be at least 4 characters long`;\n  }\n}\nfunction validatePassword(password) {\n  if (typeof password !== \"string\" || password.length < 10) {\n    return `Passwords must be at least 10 characters long`;\n  }\n}\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(_, {\n  request\n}) {\n  const $$ctx = this;\n  if (await getUser(request)) {\n    throw redirect(\"/\");\n  }\n  return {};\n}, \"/_m/src/routes/login.tsx/0/routeData\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/0/routeData\", $$server_module0);\nconst $$server_module1 = server$.createHandler(async function $$serverHandler1(form) {\n  const $$ctx = this;\n  const loginType = form.get(\"loginType\");\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  const redirectTo = form.get(\"redirectTo\") || \"/\";\n  if (typeof loginType !== \"string\" || typeof username !== \"string\" || typeof password !== \"string\" || typeof redirectTo !== \"string\") {\n    throw new FormError(`Form not submitted correctly.`);\n  }\n  const fields = {\n    loginType,\n    username,\n    password\n  };\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password)\n  };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    throw new FormError(\"Fields invalid\", {\n      fieldErrors,\n      fields\n    });\n  }\n  switch (loginType) {\n    case \"login\":\n      {\n        const user = await login({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Username/Password combination is incorrect`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    case \"register\":\n      {\n        const userExists = await db.user.findUnique({\n          where: {\n            username\n          }\n        });\n        if (userExists) {\n          throw new FormError(`User with username ${username} already exists`, {\n            fields\n          });\n        }\n        const user = await register({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Something went wrong trying to create a new user.`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    default:\n      {\n        throw new FormError(`Login type invalid`, {\n          fields\n        });\n      }\n  }\n}, \"/_m/src/routes/login.tsx/1/loggingIn\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/1/loggingIn\", $$server_module1);\nexport default function Login() {\n  const data = useRouteData();\n  const params = useParams();\n  const [loggingIn, {\n    Form\n  }] = createRouteAction($$server_module1);\n  return _$ssr(_tmpl$8, _$ssrHydrationKey(), _$escape(_$createComponent(Form, {\n    get children() {\n      return [_$ssr(_tmpl$, _$ssrHydrationKey(), _$ssrAttribute(\"value\", _$escape(params.redirectTo, true) ?? \"/\", false)), _$ssr(_tmpl$2, _$ssrHydrationKey(), _$ssrAttribute(\"checked\", true, true)), _$ssr(_tmpl$3, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.username;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.username));\n        }\n      }), _$ssr(_tmpl$5, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.password;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.password));\n        }\n      }), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error;\n        },\n        get children() {\n          return _$ssr(_tmpl$6, _$ssrHydrationKey(), _$escape(loggingIn.error.message));\n        }\n      }), _$ssr(_tmpl$7, _$ssrHydrationKey(), data() ? \"Login\" : \"\")];\n    }\n  })));\n}","start":1675684142474,"end":1675684142504,"order":"pre"},{"name":"vite:define","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<input\", \" type=\\\"hidden\\\" name=\\\"redirectTo\\\"\", \">\"],\n  _tmpl$2 = [\"<fieldset\", \"><legend>Login or Register?</legend><label class=\\\"text-red-500\\\"><input class=\\\"text-red-500\\\" type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"login\\\"\", \"> Login</label><label><input type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"register\\\"> Register</label></fieldset>\"],\n  _tmpl$3 = [\"<div\", \"><label for=\\\"username-input\\\">Username</label><input name=\\\"username\\\" placeholder=\\\"kody\\\"></div>\"],\n  _tmpl$4 = [\"<p\", \" role=\\\"alert\\\">\", \"</p>\"],\n  _tmpl$5 = [\"<div\", \"><label for=\\\"password-input\\\">Password</label><input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"twixrox\\\"></div>\"],\n  _tmpl$6 = [\"<p\", \" role=\\\"alert\\\" id=\\\"error-message\\\">\", \"</p>\"],\n  _tmpl$7 = [\"<button\", \" type=\\\"submit\\\">\", \"</button>\"],\n  _tmpl$8 = [\"<main\", \"><h1>Login</h1><!--#-->\", \"<!--/--></main>\"];\nimport \"solid-start/data\";\nimport { createRouteAction } from \"solid-start/data\";\nimport server$ from \"solid-start/server\";\nimport { Show } from \"solid-js\";\nimport { useParams, useRouteData } from \"solid-start\";\nimport { FormError } from \"solid-start/data\";\nimport { redirect } from \"solid-start/server\";\nimport { db } from \"~/db\";\nimport { createUserSession, getUser, login, register } from \"~/db/session\";\nfunction validateUsername(username) {\n  if (typeof username !== \"string\" || username.length < 4) {\n    return `Usernames must be at least 4 characters long`;\n  }\n}\nfunction validatePassword(password) {\n  if (typeof password !== \"string\" || password.length < 10) {\n    return `Passwords must be at least 10 characters long`;\n  }\n}\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(_, {\n  request\n}) {\n  const $$ctx = this;\n  if (await getUser(request)) {\n    throw redirect(\"/\");\n  }\n  return {};\n}, \"/_m/src/routes/login.tsx/0/routeData\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/0/routeData\", $$server_module0);\nconst $$server_module1 = server$.createHandler(async function $$serverHandler1(form) {\n  const $$ctx = this;\n  const loginType = form.get(\"loginType\");\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  const redirectTo = form.get(\"redirectTo\") || \"/\";\n  if (typeof loginType !== \"string\" || typeof username !== \"string\" || typeof password !== \"string\" || typeof redirectTo !== \"string\") {\n    throw new FormError(`Form not submitted correctly.`);\n  }\n  const fields = {\n    loginType,\n    username,\n    password\n  };\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password)\n  };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    throw new FormError(\"Fields invalid\", {\n      fieldErrors,\n      fields\n    });\n  }\n  switch (loginType) {\n    case \"login\":\n      {\n        const user = await login({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Username/Password combination is incorrect`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    case \"register\":\n      {\n        const userExists = await db.user.findUnique({\n          where: {\n            username\n          }\n        });\n        if (userExists) {\n          throw new FormError(`User with username ${username} already exists`, {\n            fields\n          });\n        }\n        const user = await register({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Something went wrong trying to create a new user.`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    default:\n      {\n        throw new FormError(`Login type invalid`, {\n          fields\n        });\n      }\n  }\n}, \"/_m/src/routes/login.tsx/1/loggingIn\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/1/loggingIn\", $$server_module1);\nexport default function Login() {\n  const data = useRouteData();\n  const params = useParams();\n  const [loggingIn, {\n    Form\n  }] = createRouteAction($$server_module1);\n  return _$ssr(_tmpl$8, _$ssrHydrationKey(), _$escape(_$createComponent(Form, {\n    get children() {\n      return [_$ssr(_tmpl$, _$ssrHydrationKey(), _$ssrAttribute(\"value\", _$escape(params.redirectTo, true) ?? \"/\", false)), _$ssr(_tmpl$2, _$ssrHydrationKey(), _$ssrAttribute(\"checked\", true, true)), _$ssr(_tmpl$3, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.username;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.username));\n        }\n      }), _$ssr(_tmpl$5, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.password;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.password));\n        }\n      }), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error;\n        },\n        get children() {\n          return _$ssr(_tmpl$6, _$ssrHydrationKey(), _$escape(loggingIn.error.message));\n        }\n      }), _$ssr(_tmpl$7, _$ssrHydrationKey(), data() ? \"Login\" : \"\")];\n    }\n  })));\n}","start":1675684142504,"end":1675684142504,"order":"normal"},{"name":"vite:import-analysis","result":"import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { ssr as _$ssr } from \"solid-js/web\";\nimport { ssrAttribute as _$ssrAttribute } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<input\", \" type=\\\"hidden\\\" name=\\\"redirectTo\\\"\", \">\"],\n  _tmpl$2 = [\"<fieldset\", \"><legend>Login or Register?</legend><label class=\\\"text-red-500\\\"><input class=\\\"text-red-500\\\" type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"login\\\"\", \"> Login</label><label><input type=\\\"radio\\\" name=\\\"loginType\\\" value=\\\"register\\\"> Register</label></fieldset>\"],\n  _tmpl$3 = [\"<div\", \"><label for=\\\"username-input\\\">Username</label><input name=\\\"username\\\" placeholder=\\\"kody\\\"></div>\"],\n  _tmpl$4 = [\"<p\", \" role=\\\"alert\\\">\", \"</p>\"],\n  _tmpl$5 = [\"<div\", \"><label for=\\\"password-input\\\">Password</label><input name=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"twixrox\\\"></div>\"],\n  _tmpl$6 = [\"<p\", \" role=\\\"alert\\\" id=\\\"error-message\\\">\", \"</p>\"],\n  _tmpl$7 = [\"<button\", \" type=\\\"submit\\\">\", \"</button>\"],\n  _tmpl$8 = [\"<main\", \"><h1>Login</h1><!--#-->\", \"<!--/--></main>\"];\nimport \"/node_modules/solid-start/data/index.ts\";\nimport { createRouteAction } from \"/node_modules/solid-start/data/index.ts\";\nimport server$ from \"/node_modules/solid-start/server/server.ts\";\nimport { Show } from \"solid-js\";\nimport { useParams, useRouteData } from \"/node_modules/solid-start/index.tsx\";\nimport { FormError } from \"/node_modules/solid-start/data/index.ts\";\nimport { redirect } from \"/node_modules/solid-start/server/server.ts\";\nimport { db } from \"/src/db/index.ts\";\nimport { createUserSession, getUser, login, register } from \"/src/db/session.ts\";\nfunction validateUsername(username) {\n  if (typeof username !== \"string\" || username.length < 4) {\n    return `Usernames must be at least 4 characters long`;\n  }\n}\nfunction validatePassword(password) {\n  if (typeof password !== \"string\" || password.length < 10) {\n    return `Passwords must be at least 10 characters long`;\n  }\n}\nconst $$server_module0 = server$.createHandler(async function $$serverHandler0(_, {\n  request\n}) {\n  const $$ctx = this;\n  if (await getUser(request)) {\n    throw redirect(\"/\");\n  }\n  return {};\n}, \"/_m/src/routes/login.tsx/0/routeData\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/0/routeData\", $$server_module0);\nconst $$server_module1 = server$.createHandler(async function $$serverHandler1(form) {\n  const $$ctx = this;\n  const loginType = form.get(\"loginType\");\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  const redirectTo = form.get(\"redirectTo\") || \"/\";\n  if (typeof loginType !== \"string\" || typeof username !== \"string\" || typeof password !== \"string\" || typeof redirectTo !== \"string\") {\n    throw new FormError(`Form not submitted correctly.`);\n  }\n  const fields = {\n    loginType,\n    username,\n    password\n  };\n  const fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password)\n  };\n  if (Object.values(fieldErrors).some(Boolean)) {\n    throw new FormError(\"Fields invalid\", {\n      fieldErrors,\n      fields\n    });\n  }\n  switch (loginType) {\n    case \"login\":\n      {\n        const user = await login({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Username/Password combination is incorrect`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    case \"register\":\n      {\n        const userExists = await db.user.findUnique({\n          where: {\n            username\n          }\n        });\n        if (userExists) {\n          throw new FormError(`User with username ${username} already exists`, {\n            fields\n          });\n        }\n        const user = await register({\n          username,\n          password\n        });\n        if (!user) {\n          throw new FormError(`Something went wrong trying to create a new user.`, {\n            fields\n          });\n        }\n        return createUserSession(`${user.id}`, redirectTo);\n      }\n    default:\n      {\n        throw new FormError(`Login type invalid`, {\n          fields\n        });\n      }\n  }\n}, \"/_m/src/routes/login.tsx/1/loggingIn\", true);\nserver$.registerHandler(\"/_m/src/routes/login.tsx/1/loggingIn\", $$server_module1);\nexport default function Login() {\n  const data = useRouteData();\n  const params = useParams();\n  const [loggingIn, {\n    Form\n  }] = createRouteAction($$server_module1);\n  return _$ssr(_tmpl$8, _$ssrHydrationKey(), _$escape(_$createComponent(Form, {\n    get children() {\n      return [_$ssr(_tmpl$, _$ssrHydrationKey(), _$ssrAttribute(\"value\", _$escape(params.redirectTo, true) ?? \"/\", false)), _$ssr(_tmpl$2, _$ssrHydrationKey(), _$ssrAttribute(\"checked\", true, true)), _$ssr(_tmpl$3, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.username;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.username));\n        }\n      }), _$ssr(_tmpl$5, _$ssrHydrationKey()), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error?.fieldErrors?.password;\n        },\n        get children() {\n          return _$ssr(_tmpl$4, _$ssrHydrationKey(), _$escape(loggingIn.error.fieldErrors.password));\n        }\n      }), _$createComponent(Show, {\n        get when() {\n          return loggingIn.error;\n        },\n        get children() {\n          return _$ssr(_tmpl$6, _$ssrHydrationKey(), _$escape(loggingIn.error.message));\n        }\n      }), _$ssr(_tmpl$7, _$ssrHydrationKey(), data() ? \"Login\" : \"\")];\n    }\n  })));\n}","start":1675684142505,"end":1675684142510,"order":"normal"}]}
