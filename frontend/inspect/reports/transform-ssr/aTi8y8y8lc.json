{"resolvedId":"/home/edge/dev/js/private-cloud/src/components/Directory/Menu/Checkbox.tsx","transforms":[{"name":"__load__","result":"import { createEffect, createSignal, JSX } from \"solid-js\";\nimport useHover from \"~/hooks/useHover\";\n\ninterface ICheckbox {\n  \tonClick: (isChecked: boolean, e: unknown) => void;\n    className?: string;\n    checkedClass?: string;\n\tforceState?: boolean;\n    behaveAsButton?: boolean;\n    children?: (isChecked: boolean, hover: boolean) => JSX.Element; \n}\n\nexport default function Checkbox( { forceState, className, checkedClass, behaveAsButton, onClick, children } : ICheckbox ) \n{\n    const [isChecked, setChecked] = createSignal<boolean>(forceState || false)\t\n\tconst { hover, onMouseOver, onMouseOut } = useHover();\n\n    createEffect( () => {\n        if ( forceState === undefined ) return;\n        setChecked( forceState )\n    }, [forceState] )\n\n  \treturn (\n        <div \n            class={`${className} ${isChecked() ? checkedClass : ''}`}\n            onMouseOver={onMouseOver}\n            onMouseOut={onMouseOut}\n            onMouseDown={() => behaveAsButton && setChecked(true)}\n            onMouseUp={() => behaveAsButton && setChecked(false)}\n            onClick={e => { \t\n\t\t\t\tconst update = forceState !== undefined ? forceState : !isChecked;\t\n\t\t\t\tonClick( update, e ); \n\t\t\t\t!behaveAsButton && setChecked( update ); \n\t\t\t}}\n\t\t>\n\t\t\t{ children && children(isChecked(), hover()) }\n        </div>\n  \t);\n};","start":1675681822375,"end":1675681822375},{"name":"solid","result":"import { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<div\", \" class=\\\"\", \"\\\">\", \"</div>\"];\nimport { createEffect, createSignal } from \"solid-js\";\nimport useHover from \"~/hooks/useHover\";\nexport default function Checkbox({\n  forceState,\n  className,\n  checkedClass,\n  behaveAsButton,\n  onClick,\n  children\n}) {\n  const [isChecked, setChecked] = createSignal(forceState || false);\n  const {\n    hover,\n    onMouseOver,\n    onMouseOut\n  } = useHover();\n  createEffect(() => {\n    if (forceState === undefined) return;\n    setChecked(forceState);\n  }, [forceState]);\n  return _$ssr(_tmpl$, _$ssrHydrationKey(), `${_$escape(className, true)} ${isChecked() ? _$escape(checkedClass, true) : ''}`, children && _$escape(children(isChecked(), hover())));\n}\n;","start":1675681822375,"end":1675681822382,"order":"pre"},{"name":"vite:define","result":"import { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<div\", \" class=\\\"\", \"\\\">\", \"</div>\"];\nimport { createEffect, createSignal } from \"solid-js\";\nimport useHover from \"~/hooks/useHover\";\nexport default function Checkbox({\n  forceState,\n  className,\n  checkedClass,\n  behaveAsButton,\n  onClick,\n  children\n}) {\n  const [isChecked, setChecked] = createSignal(forceState || false);\n  const {\n    hover,\n    onMouseOver,\n    onMouseOut\n  } = useHover();\n  createEffect(() => {\n    if (forceState === undefined) return;\n    setChecked(forceState);\n  }, [forceState]);\n  return _$ssr(_tmpl$, _$ssrHydrationKey(), `${_$escape(className, true)} ${isChecked() ? _$escape(checkedClass, true) : ''}`, children && _$escape(children(isChecked(), hover())));\n}\n;","start":1675681822382,"end":1675681822382,"order":"normal"},{"name":"vite:import-analysis","result":"import { ssr as _$ssr } from \"solid-js/web\";\nimport { escape as _$escape } from \"solid-js/web\";\nimport { ssrHydrationKey as _$ssrHydrationKey } from \"solid-js/web\";\nconst _tmpl$ = [\"<div\", \" class=\\\"\", \"\\\">\", \"</div>\"];\nimport { createEffect, createSignal } from \"solid-js\";\nimport useHover from \"/src/hooks/useHover.tsx\";\nexport default function Checkbox({\n  forceState,\n  className,\n  checkedClass,\n  behaveAsButton,\n  onClick,\n  children\n}) {\n  const [isChecked, setChecked] = createSignal(forceState || false);\n  const {\n    hover,\n    onMouseOver,\n    onMouseOut\n  } = useHover();\n  createEffect(() => {\n    if (forceState === undefined) return;\n    setChecked(forceState);\n  }, [forceState]);\n  return _$ssr(_tmpl$, _$ssrHydrationKey(), `${_$escape(className, true)} ${isChecked() ? _$escape(checkedClass, true) : ''}`, children && _$escape(children(isChecked(), hover())));\n}\n;","start":1675681822382,"end":1675681822382,"order":"normal"}]}
