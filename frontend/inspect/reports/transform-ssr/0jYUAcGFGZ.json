{"resolvedId":"/home/edge/dev/js/private-cloud/src/requests/FolderService.ts","transforms":[{"name":"__load__","result":"\nimport useRequestsService from \"./RequestsService\"\n\nimport { FileOrFolder } from \"../types\"\n\n\nconst service = useRequestsService('/folder/')\n\nconst FolderService = {\n    read: (pathname: string, cb: (data: FileOrFolder[]) => void) => {\n        service.get( 'read', { pathname }, cb )\n    },\n\n    create: (pathname: string, name: string, cb: () => void ) => {\n        service.get( 'create', { pathname, name }, cb )\n    },\n\n    rename: (pathname: string, oldName: string, cb: (newName: string) => void) => (newName: string, err: () => void) => {\n        service.get<string>( 'rename', { pathname, oldName, newName }, () => cb(newName), () => {\n            err()\n            // alertError('rename folder failed')\n        } )\n    },\n\n    removeOne: (pathname: string, cb: (name: string) => void) => (name: string) => {\n        service.get('remove', { pathname, name }, () => cb(name) /*, () => alertError('remove folder failed') */ )\n    },\n\n    // same as many files\n    // TODO: recursive search in folders -> zip\n    downloadOne: (pathname: string) => (name: string) => {\n        throw new Error('TODO')\n        service.get('download', { pathname, name }, undefined, /* () => alertError('download folder failed') */ )\n    }\n}\n\nexport default FolderService;","start":1675682476828,"end":1675682476828},{"name":"vite:esbuild","result":"import useRequestsService from \"./RequestsService\";\nconst service = useRequestsService(\"/folder/\");\nconst FolderService = {\n  read: (pathname, cb) => {\n    service.get(\"read\", { pathname }, cb);\n  },\n  create: (pathname, name, cb) => {\n    service.get(\"create\", { pathname, name }, cb);\n  },\n  rename: (pathname, oldName, cb) => (newName, err) => {\n    service.get(\"rename\", { pathname, oldName, newName }, () => cb(newName), () => {\n      err();\n    });\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\"remove\", { pathname, name }, () => cb(name));\n  },\n  downloadOne: (pathname) => (name) => {\n    throw new Error(\"TODO\");\n    service.get(\"download\", { pathname, name }, void 0);\n  }\n};\nexport default FolderService;\n","start":1675682476828,"end":1675682476831,"order":"normal"},{"name":"vite:define","result":"import useRequestsService from \"./RequestsService\";\nconst service = useRequestsService(\"/folder/\");\nconst FolderService = {\n  read: (pathname, cb) => {\n    service.get(\"read\", { pathname }, cb);\n  },\n  create: (pathname, name, cb) => {\n    service.get(\"create\", { pathname, name }, cb);\n  },\n  rename: (pathname, oldName, cb) => (newName, err) => {\n    service.get(\"rename\", { pathname, oldName, newName }, () => cb(newName), () => {\n      err();\n    });\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\"remove\", { pathname, name }, () => cb(name));\n  },\n  downloadOne: (pathname) => (name) => {\n    throw new Error(\"TODO\");\n    service.get(\"download\", { pathname, name }, void 0);\n  }\n};\nexport default FolderService;\n","start":1675682476831,"end":1675682476831,"order":"normal"},{"name":"vite:import-analysis","result":"import useRequestsService from \"/src/requests/RequestsService.ts\";\nconst service = useRequestsService(\"/folder/\");\nconst FolderService = {\n  read: (pathname, cb) => {\n    service.get(\"read\", { pathname }, cb);\n  },\n  create: (pathname, name, cb) => {\n    service.get(\"create\", { pathname, name }, cb);\n  },\n  rename: (pathname, oldName, cb) => (newName, err) => {\n    service.get(\"rename\", { pathname, oldName, newName }, () => cb(newName), () => {\n      err();\n    });\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\"remove\", { pathname, name }, () => cb(name));\n  },\n  downloadOne: (pathname) => (name) => {\n    throw new Error(\"TODO\");\n    service.get(\"download\", { pathname, name }, void 0);\n  }\n};\nexport default FolderService;\n","start":1675682476831,"end":1675682476831,"order":"normal"}]}
