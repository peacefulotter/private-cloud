{"resolvedId":"/home/edge/dev/js/private-cloud/src/db/session.ts","transforms":[{"name":"__load__","result":"import { redirect } from \"solid-start/server\";\nimport { createCookieSessionStorage } from \"solid-start/session\";\nimport { db } from \".\";\n\ntype LoginForm = {\n  username: string;\n  password: string;\n};\n\nexport async function register({ username, password }: LoginForm) {\n  return db.user.create({\n    data: { username: username, password },\n  });\n}\n\nexport async function login({ username, password }: LoginForm) {\n  const user = await db.user.findUnique({ where: { username } });\n  if (!user) return null;\n  const isCorrectPassword = password === user.password;\n  if (!isCorrectPassword) return null;\n  return user;\n}\n\nconst sessionSecret = import.meta.env.SESSION_SECRET;\n\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"RJ_session\",\n    // secure doesn't work on localhost for Safari\n    // https://web.dev/when-to-use-local-https/\n    secure: true,\n    secrets: [\"hello\"],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true,\n  },\n});\n\nexport function getUserSession(request: Request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\n\nexport async function getUserId(request: Request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") return null;\n  return userId;\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\n\nexport async function getUser(request: Request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n\n  try {\n    const user = await db.user.findUnique({ where: { id: Number(userId) } });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\n\nexport async function logout(request: Request) {\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session),\n    },\n  });\n}\n\nexport async function createUserSession(userId: string, redirectTo: string) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session),\n    },\n  });\n}\n","start":1675684142511,"end":1675684142511},{"name":"solid-start-file-system-router","result":"import { redirect } from \"solid-start/server\";\nimport { createCookieSessionStorage } from \"solid-start/session\";\nimport { db } from \".\";\nexport async function register({\n  username,\n  password\n}) {\n  return db.user.create({\n    data: {\n      username: username,\n      password\n    }\n  });\n}\nexport async function login({\n  username,\n  password\n}) {\n  const user = await db.user.findUnique({\n    where: {\n      username\n    }\n  });\n  if (!user) return null;\n  const isCorrectPassword = password === user.password;\n  if (!isCorrectPassword) return null;\n  return user;\n}\nconst sessionSecret = import.meta.env.SESSION_SECRET;\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"RJ_session\",\n    // secure doesn't work on localhost for Safari\n    // https://web.dev/when-to-use-local-https/\n    secure: true,\n    secrets: [\"hello\"],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true\n  }\n});\nexport function getUserSession(request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\nexport async function getUserId(request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") return null;\n  return userId;\n}\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n  try {\n    const user = await db.user.findUnique({\n      where: {\n        id: Number(userId)\n      }\n    });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\nexport async function logout(request) {\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session)\n    }\n  });\n}\nexport async function createUserSession(userId, redirectTo) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session)\n    }\n  });\n}","start":1675684142511,"end":1675684142526,"order":"pre"},{"name":"vite:esbuild","result":"import { redirect } from \"solid-start/server\";\nimport { createCookieSessionStorage } from \"solid-start/session\";\nimport { db } from \".\";\nexport async function register({\n  username,\n  password\n}) {\n  return db.user.create({\n    data: {\n      username,\n      password\n    }\n  });\n}\nexport async function login({\n  username,\n  password\n}) {\n  const user = await db.user.findUnique({\n    where: {\n      username\n    }\n  });\n  if (!user)\n    return null;\n  const isCorrectPassword = password === user.password;\n  if (!isCorrectPassword)\n    return null;\n  return user;\n}\nconst sessionSecret = import.meta.env.SESSION_SECRET;\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"RJ_session\",\n    secure: true,\n    secrets: [\"hello\"],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true\n  }\n});\nexport function getUserSession(request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\nexport async function getUserId(request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\")\n    return null;\n  return userId;\n}\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n  try {\n    const user = await db.user.findUnique({\n      where: {\n        id: Number(userId)\n      }\n    });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\nexport async function logout(request) {\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session)\n    }\n  });\n}\nexport async function createUserSession(userId, redirectTo) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session)\n    }\n  });\n}\n","start":1675684142526,"end":1675684142540,"order":"normal"},{"name":"vite:define","result":"import { redirect } from \"solid-start/server\";\nimport { createCookieSessionStorage } from \"solid-start/session\";\nimport { db } from \".\";\nexport async function register({\n  username,\n  password\n}) {\n  return db.user.create({\n    data: {\n      username,\n      password\n    }\n  });\n}\nexport async function login({\n  username,\n  password\n}) {\n  const user = await db.user.findUnique({\n    where: {\n      username\n    }\n  });\n  if (!user)\n    return null;\n  const isCorrectPassword = password === user.password;\n  if (!isCorrectPassword)\n    return null;\n  return user;\n}\nconst sessionSecret = import.meta.env.SESSION_SECRET;\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"RJ_session\",\n    secure: true,\n    secrets: [\"hello\"],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true\n  }\n});\nexport function getUserSession(request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\nexport async function getUserId(request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\")\n    return null;\n  return userId;\n}\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n  try {\n    const user = await db.user.findUnique({\n      where: {\n        id: Number(userId)\n      }\n    });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\nexport async function logout(request) {\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session)\n    }\n  });\n}\nexport async function createUserSession(userId, redirectTo) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session)\n    }\n  });\n}\n","start":1675684142540,"end":1675684142540,"order":"normal"},{"name":"vite:import-analysis","result":"import.meta.env = {\"BASE_URL\":\"/\",\"MODE\":\"development\",\"DEV\":true,\"PROD\":false,\"SSR\":true};import.meta.env.START_SSR = true;import.meta.env.START_ISLANDS = false;import.meta.env.START_ENTRY_CLIENT = \"/home/edge/dev/js/private-cloud/src/entry-client.tsx\";import.meta.env.START_ENTRY_SERVER = \"/home/edge/dev/js/private-cloud/src/entry-server.tsx\";import.meta.env.START_INDEX_HTML = false;import.meta.env.START_ISLANDS_ROUTER = false;import.meta.env.START_ADAPTER = \"solid-start-node\";import { redirect } from \"/node_modules/solid-start/server/server.ts\";\nimport { createCookieSessionStorage } from \"/node_modules/solid-start/session/index.ts\";\nimport { db } from \"/src/db/index.ts\";\nexport async function register({\n  username,\n  password\n}) {\n  return db.user.create({\n    data: {\n      username,\n      password\n    }\n  });\n}\nexport async function login({\n  username,\n  password\n}) {\n  const user = await db.user.findUnique({\n    where: {\n      username\n    }\n  });\n  if (!user)\n    return null;\n  const isCorrectPassword = password === user.password;\n  if (!isCorrectPassword)\n    return null;\n  return user;\n}\nconst sessionSecret = import.meta.env.SESSION_SECRET;\nconst storage = createCookieSessionStorage({\n  cookie: {\n    name: \"RJ_session\",\n    secure: true,\n    secrets: [\"hello\"],\n    sameSite: \"lax\",\n    path: \"/\",\n    maxAge: 60 * 60 * 24 * 30,\n    httpOnly: true\n  }\n});\nexport function getUserSession(request) {\n  return storage.getSession(request.headers.get(\"Cookie\"));\n}\nexport async function getUserId(request) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\")\n    return null;\n  return userId;\n}\nexport async function requireUserId(request, redirectTo = new URL(request.url).pathname) {\n  const session = await getUserSession(request);\n  const userId = session.get(\"userId\");\n  if (!userId || typeof userId !== \"string\") {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return userId;\n}\nexport async function getUser(request) {\n  const userId = await getUserId(request);\n  if (typeof userId !== \"string\") {\n    return null;\n  }\n  try {\n    const user = await db.user.findUnique({\n      where: {\n        id: Number(userId)\n      }\n    });\n    return user;\n  } catch {\n    throw logout(request);\n  }\n}\nexport async function logout(request) {\n  const session = await storage.getSession(request.headers.get(\"Cookie\"));\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await storage.destroySession(session)\n    }\n  });\n}\nexport async function createUserSession(userId, redirectTo) {\n  const session = await storage.getSession();\n  session.set(\"userId\", userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await storage.commitSession(session)\n    }\n  });\n}\n","start":1675684142540,"end":1675684142542,"order":"normal"}]}
