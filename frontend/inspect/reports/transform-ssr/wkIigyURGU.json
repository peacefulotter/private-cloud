{"resolvedId":"/home/edge/dev/js/private-cloud/src/context/ExplorerCtx.tsx","transforms":[{"name":"__load__","result":"\n\n\nimport { useLocation } from \"@solidjs/router\";\nimport { Accessor, createContext, createEffect, createSignal, useContext } from \"solid-js\";\nimport { Explorer, FileOrFolder } from \"~/types\";\nimport useFileService from \"../requests/FileService\";\nimport FolderService from \"../requests/FolderService\";\nimport useFolderService from \"../requests/FolderService\";\n\n    \n    // const [isSelecting, setIsSelecting] = createSignal<boolean>(false)\n\n    // const folderService = useFolderService();\n    // const fileService = useFileService();\n\n    // const { pathname } = useLocation()\n\n    \n\nexport const toggleSelect = () => setIsSelecting( prev => !prev )\n\nexport const toggleSelectExplorer = (i: number) => () => {\n    const temp = [...explorer()];\n    temp[i].selected = !temp[i].selected;\n    setExplorer(temp);\n}\n\n    // createEffect( () => {\n    //     folderService.read(pathname, setExplorer)\n    // }, [pathname] )\n\nexport const setSortedExlorer = ( cb: (prev: Explorer) => Explorer ) => \n    setExplorer( prev => cb(prev).sort( (a, b) => a.name.localeCompare(b.name) ) )\n\n// upload\n// TODO support upload folders\nexport const upload = (files: File[], progress: (e: ProgressEvent) => void, cb: () => void, err: () => void) => {\n    const data = new FormData();\n    data.append('pathname', pathname)\n    files.forEach( file => data.append('files[]', file, file.name) )\n\n    fileService.upload( data, \n        progress, \n        () => { \n            const filesExplorer = files.map( ({name}) => ({name, selected: false, type: 'file'} as FileOrFolder))\n            setSortedExlorer( prev => [...prev, ...filesExplorer] )\n            cb()\n        },\n        err\n    )\n}\n\n// rename\nexport const renameFolder = (explorer: Explorer, pathname: string, i: number) => FolderService.rename(pathname, explorer[i].name, name => {\n    const temp = [...explorer];\n    temp[i].name = name;\n    setSortedExlorer( _ => temp )\n} )\n    \n// create\nexport const resolveName = (baseName: string, type: 'file' | 'folder') => {\n    let name = baseName;\n    let i = 1\n    while ( explorer().some( v => v.name === name && v.type === type) ) {\n        name = baseName + ` (${i++})`\n    }\n    return name;\n}\n\nexport const createFolder = () => {\n    const name = resolveName('New folder', 'folder');\n    folderService.create( pathname, name, () => {\n        console.log('here');\n        setSortedExlorer( prev => [...prev, { name, selected: false, type: 'folder' }] )\n        } )\n}\n\n// remove\nexport const removeOne = (type: 'file' | 'folder') => (name: string) => \n    setExplorer( prev => prev.filter( v => v.name !== name || v.type !== type ) )\nexport const removeOneFile = fileService.removeOne(pathname, removeOne('file') );\nexport const removeOneFolder = folderService.removeOne(pathname, removeOne('folder') );\nexport const removeSelected = fileService.removeSelected( pathname, explorer(), () => \n    setExplorer( prev => prev.filter( v => !v.selected ) )\n)\n\n// download\nexport const downloadOneFile = fileService.downloadOne(pathname)\nexport const downloadOneFolder = folderService.downloadOne(pathname)\nexport const downloadSelected = fileService.downloadMany(pathname, explorer().filter( v => v.selected ))","start":1675682511988,"end":1675682511988},{"name":"solid","result":"import \"@solidjs/router\";\nimport \"solid-js\";\nimport \"../requests/FileService\";\nimport FolderService from \"../requests/FolderService\";\nimport \"../requests/FolderService\";\n\n// const [isSelecting, setIsSelecting] = createSignal<boolean>(false)\n\n// const folderService = useFolderService();\n// const fileService = useFileService();\n\n// const { pathname } = useLocation()\n\nexport const toggleSelect = () => setIsSelecting(prev => !prev);\nexport const toggleSelectExplorer = i => () => {\n  const temp = [...explorer()];\n  temp[i].selected = !temp[i].selected;\n  setExplorer(temp);\n};\n\n// createEffect( () => {\n//     folderService.read(pathname, setExplorer)\n// }, [pathname] )\n\nexport const setSortedExlorer = cb => setExplorer(prev => cb(prev).sort((a, b) => a.name.localeCompare(b.name)));\n\n// upload\n// TODO support upload folders\nexport const upload = (files, progress, cb, err) => {\n  const data = new FormData();\n  data.append('pathname', pathname);\n  files.forEach(file => data.append('files[]', file, file.name));\n  fileService.upload(data, progress, () => {\n    const filesExplorer = files.map(({\n      name\n    }) => ({\n      name,\n      selected: false,\n      type: 'file'\n    }));\n    setSortedExlorer(prev => [...prev, ...filesExplorer]);\n    cb();\n  }, err);\n};\n\n// rename\nexport const renameFolder = (explorer, pathname, i) => FolderService.rename(pathname, explorer[i].name, name => {\n  const temp = [...explorer];\n  temp[i].name = name;\n  setSortedExlorer(_ => temp);\n});\n\n// create\nexport const resolveName = (baseName, type) => {\n  let name = baseName;\n  let i = 1;\n  while (explorer().some(v => v.name === name && v.type === type)) {\n    name = baseName + ` (${i++})`;\n  }\n  return name;\n};\nexport const createFolder = () => {\n  const name = resolveName('New folder', 'folder');\n  folderService.create(pathname, name, () => {\n    console.log('here');\n    setSortedExlorer(prev => [...prev, {\n      name,\n      selected: false,\n      type: 'folder'\n    }]);\n  });\n};\n\n// remove\nexport const removeOne = type => name => setExplorer(prev => prev.filter(v => v.name !== name || v.type !== type));\nexport const removeOneFile = fileService.removeOne(pathname, removeOne('file'));\nexport const removeOneFolder = folderService.removeOne(pathname, removeOne('folder'));\nexport const removeSelected = fileService.removeSelected(pathname, explorer(), () => setExplorer(prev => prev.filter(v => !v.selected)));\n\n// download\nexport const downloadOneFile = fileService.downloadOne(pathname);\nexport const downloadOneFolder = folderService.downloadOne(pathname);\nexport const downloadSelected = fileService.downloadMany(pathname, explorer().filter(v => v.selected));","start":1675682511988,"end":1675682512005,"order":"pre"},{"name":"vite:define","result":"import \"@solidjs/router\";\nimport \"solid-js\";\nimport \"../requests/FileService\";\nimport FolderService from \"../requests/FolderService\";\nimport \"../requests/FolderService\";\n\n// const [isSelecting, setIsSelecting] = createSignal<boolean>(false)\n\n// const folderService = useFolderService();\n// const fileService = useFileService();\n\n// const { pathname } = useLocation()\n\nexport const toggleSelect = () => setIsSelecting(prev => !prev);\nexport const toggleSelectExplorer = i => () => {\n  const temp = [...explorer()];\n  temp[i].selected = !temp[i].selected;\n  setExplorer(temp);\n};\n\n// createEffect( () => {\n//     folderService.read(pathname, setExplorer)\n// }, [pathname] )\n\nexport const setSortedExlorer = cb => setExplorer(prev => cb(prev).sort((a, b) => a.name.localeCompare(b.name)));\n\n// upload\n// TODO support upload folders\nexport const upload = (files, progress, cb, err) => {\n  const data = new FormData();\n  data.append('pathname', pathname);\n  files.forEach(file => data.append('files[]', file, file.name));\n  fileService.upload(data, progress, () => {\n    const filesExplorer = files.map(({\n      name\n    }) => ({\n      name,\n      selected: false,\n      type: 'file'\n    }));\n    setSortedExlorer(prev => [...prev, ...filesExplorer]);\n    cb();\n  }, err);\n};\n\n// rename\nexport const renameFolder = (explorer, pathname, i) => FolderService.rename(pathname, explorer[i].name, name => {\n  const temp = [...explorer];\n  temp[i].name = name;\n  setSortedExlorer(_ => temp);\n});\n\n// create\nexport const resolveName = (baseName, type) => {\n  let name = baseName;\n  let i = 1;\n  while (explorer().some(v => v.name === name && v.type === type)) {\n    name = baseName + ` (${i++})`;\n  }\n  return name;\n};\nexport const createFolder = () => {\n  const name = resolveName('New folder', 'folder');\n  folderService.create(pathname, name, () => {\n    console.log('here');\n    setSortedExlorer(prev => [...prev, {\n      name,\n      selected: false,\n      type: 'folder'\n    }]);\n  });\n};\n\n// remove\nexport const removeOne = type => name => setExplorer(prev => prev.filter(v => v.name !== name || v.type !== type));\nexport const removeOneFile = fileService.removeOne(pathname, removeOne('file'));\nexport const removeOneFolder = folderService.removeOne(pathname, removeOne('folder'));\nexport const removeSelected = fileService.removeSelected(pathname, explorer(), () => setExplorer(prev => prev.filter(v => !v.selected)));\n\n// download\nexport const downloadOneFile = fileService.downloadOne(pathname);\nexport const downloadOneFolder = folderService.downloadOne(pathname);\nexport const downloadSelected = fileService.downloadMany(pathname, explorer().filter(v => v.selected));","start":1675682512006,"end":1675682512006,"order":"normal"},{"name":"vite:import-analysis","result":"import \"/node_modules/@solidjs/router/dist/index.jsx\";\nimport \"solid-js\";\nimport \"/src/requests/FileService.ts\";\nimport FolderService from \"/src/requests/FolderService.ts\";\nimport \"/src/requests/FolderService.ts\";\n\n// const [isSelecting, setIsSelecting] = createSignal<boolean>(false)\n\n// const folderService = useFolderService();\n// const fileService = useFileService();\n\n// const { pathname } = useLocation()\n\nexport const toggleSelect = () => setIsSelecting(prev => !prev);\nexport const toggleSelectExplorer = i => () => {\n  const temp = [...explorer()];\n  temp[i].selected = !temp[i].selected;\n  setExplorer(temp);\n};\n\n// createEffect( () => {\n//     folderService.read(pathname, setExplorer)\n// }, [pathname] )\n\nexport const setSortedExlorer = cb => setExplorer(prev => cb(prev).sort((a, b) => a.name.localeCompare(b.name)));\n\n// upload\n// TODO support upload folders\nexport const upload = (files, progress, cb, err) => {\n  const data = new FormData();\n  data.append('pathname', pathname);\n  files.forEach(file => data.append('files[]', file, file.name));\n  fileService.upload(data, progress, () => {\n    const filesExplorer = files.map(({\n      name\n    }) => ({\n      name,\n      selected: false,\n      type: 'file'\n    }));\n    setSortedExlorer(prev => [...prev, ...filesExplorer]);\n    cb();\n  }, err);\n};\n\n// rename\nexport const renameFolder = (explorer, pathname, i) => FolderService.rename(pathname, explorer[i].name, name => {\n  const temp = [...explorer];\n  temp[i].name = name;\n  setSortedExlorer(_ => temp);\n});\n\n// create\nexport const resolveName = (baseName, type) => {\n  let name = baseName;\n  let i = 1;\n  while (explorer().some(v => v.name === name && v.type === type)) {\n    name = baseName + ` (${i++})`;\n  }\n  return name;\n};\nexport const createFolder = () => {\n  const name = resolveName('New folder', 'folder');\n  folderService.create(pathname, name, () => {\n    console.log('here');\n    setSortedExlorer(prev => [...prev, {\n      name,\n      selected: false,\n      type: 'folder'\n    }]);\n  });\n};\n\n// remove\nexport const removeOne = type => name => setExplorer(prev => prev.filter(v => v.name !== name || v.type !== type));\nexport const removeOneFile = fileService.removeOne(pathname, removeOne('file'));\nexport const removeOneFolder = folderService.removeOne(pathname, removeOne('folder'));\nexport const removeSelected = fileService.removeSelected(pathname, explorer(), () => setExplorer(prev => prev.filter(v => !v.selected)));\n\n// download\nexport const downloadOneFile = fileService.downloadOne(pathname);\nexport const downloadOneFolder = folderService.downloadOne(pathname);\nexport const downloadSelected = fileService.downloadMany(pathname, explorer().filter(v => v.selected));","start":1675682512006,"end":1675682512007,"order":"normal"}]}
