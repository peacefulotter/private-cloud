{"resolvedId":"/home/edge/dev/js/private-cloud/node_modules/solid-start/entry-client/StartClient.tsx?v=2963516b","transforms":[{"name":"__load__","result":"import { MetaProvider } from \"@solidjs/meta\";\nimport { Router, RouterProps } from \"@solidjs/router\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FETCH_EVENT, PageEvent } from \"../server/types\";\n\nconst rootData: { default: <T>() => Promise<T> } = Object.values(\n  import.meta.glob(\"/src/root.data.(js|ts)\", { eager: true })\n)[0] as any;\nconst dataFn = rootData ? rootData.default : undefined;\n\nfunction throwClientError(field: string): any {\n  throw new Error(\n    `\"${field}\" is not available on the client. Use it within an \\`if (isServer)\\` block to ensure it only runs on the server`\n  );\n}\n\nexport default () => {\n  let mockFetchEvent: PageEvent = {\n    get request() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"request\");\n      }\n    },\n    get clientAddress() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"clientAddress\");\n      }\n    },\n    get locals() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"locals\");\n      }\n    },\n    get prevUrl() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"prevUrl\");\n      }\n    },\n    get responseHeaders() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"responseHeaders\");\n      }\n    },\n    get tags() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"tags\");\n      }\n    },\n    get env() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"env\");\n      }\n    },\n    get routerContext() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"routerContext\");\n      }\n    },\n    setStatusCode(code: number) {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"setStatusCode\");\n      }\n    },\n    getStatusCode() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"getStatusCode\");\n      }\n    },\n    $type: FETCH_EVENT,\n    fetch\n  };\n\n  function StartRouter(props: RouterProps) {\n    return (\n      <Router {...props}>\n        <Root />\n      </Router>\n    );\n  }\n\n  return (\n    <ServerContext.Provider value={mockFetchEvent}>\n      <MetaProvider>\n        <StartRouter data={dataFn}>\n          <Root />\n        </StartRouter>\n      </MetaProvider>\n    </ServerContext.Provider>\n  );\n};\n","start":1675681830725,"end":1675681830725},{"name":"solid","result":"import { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FETCH_EVENT } from \"../server/types\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\nfunction throwClientError(field) {\n  throw new Error(`\"${field}\" is not available on the client. Use it within an \\`if (isServer)\\` block to ensure it only runs on the server`);\n}\nexport default (() => {\n  let mockFetchEvent = {\n    get request() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"request\");\n      }\n    },\n    get clientAddress() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"clientAddress\");\n      }\n    },\n    get locals() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"locals\");\n      }\n    },\n    get prevUrl() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"prevUrl\");\n      }\n    },\n    get responseHeaders() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"responseHeaders\");\n      }\n    },\n    get tags() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"tags\");\n      }\n    },\n    get env() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"env\");\n      }\n    },\n    get routerContext() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"routerContext\");\n      }\n    },\n    setStatusCode(code) {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"setStatusCode\");\n      }\n    },\n    getStatusCode() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"getStatusCode\");\n      }\n    },\n    $type: FETCH_EVENT,\n    fetch\n  };\n  function StartRouter(props) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(Root, {});\n      }\n    }));\n  }\n  return _$createComponent(ServerContext.Provider, {\n    value: mockFetchEvent,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get children() {\n          return _$createComponent(StartRouter, {\n            data: dataFn,\n            get children() {\n              return _$createComponent(Root, {});\n            }\n          });\n        }\n      });\n    }\n  });\n});","start":1675681830725,"end":1675681830739,"order":"pre"},{"name":"vite:import-glob","result":"import { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FETCH_EVENT } from \"../server/types\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\nfunction throwClientError(field) {\n  throw new Error(`\"${field}\" is not available on the client. Use it within an \\`if (isServer)\\` block to ensure it only runs on the server`);\n}\nexport default (() => {\n  let mockFetchEvent = {\n    get request() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"request\");\n      }\n    },\n    get clientAddress() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"clientAddress\");\n      }\n    },\n    get locals() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"locals\");\n      }\n    },\n    get prevUrl() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"prevUrl\");\n      }\n    },\n    get responseHeaders() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"responseHeaders\");\n      }\n    },\n    get tags() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"tags\");\n      }\n    },\n    get env() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"env\");\n      }\n    },\n    get routerContext() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"routerContext\");\n      }\n    },\n    setStatusCode(code) {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"setStatusCode\");\n      }\n    },\n    getStatusCode() {\n      if (process.env.NODE_ENV === \"development\") {\n        return throwClientError(\"getStatusCode\");\n      }\n    },\n    $type: FETCH_EVENT,\n    fetch\n  };\n  function StartRouter(props) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(Root, {});\n      }\n    }));\n  }\n  return _$createComponent(ServerContext.Provider, {\n    value: mockFetchEvent,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get children() {\n          return _$createComponent(StartRouter, {\n            data: dataFn,\n            get children() {\n              return _$createComponent(Root, {});\n            }\n          });\n        }\n      });\n    }\n  });\n});","start":1675681830739,"end":1675681830743,"order":"normal"},{"name":"vite:client-inject","result":"import { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\n// @ts-ignore\nimport Root from \"~start/root\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FETCH_EVENT } from \"../server/types\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\nfunction throwClientError(field) {\n  throw new Error(`\"${field}\" is not available on the client. Use it within an \\`if (isServer)\\` block to ensure it only runs on the server`);\n}\nexport default (() => {\n  let mockFetchEvent = {\n    get request() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"request\");\n      }\n    },\n    get clientAddress() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"clientAddress\");\n      }\n    },\n    get locals() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"locals\");\n      }\n    },\n    get prevUrl() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"prevUrl\");\n      }\n    },\n    get responseHeaders() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"responseHeaders\");\n      }\n    },\n    get tags() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"tags\");\n      }\n    },\n    get env() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"env\");\n      }\n    },\n    get routerContext() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"routerContext\");\n      }\n    },\n    setStatusCode(code) {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"setStatusCode\");\n      }\n    },\n    getStatusCode() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"getStatusCode\");\n      }\n    },\n    $type: FETCH_EVENT,\n    fetch\n  };\n  function StartRouter(props) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(Root, {});\n      }\n    }));\n  }\n  return _$createComponent(ServerContext.Provider, {\n    value: mockFetchEvent,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get children() {\n          return _$createComponent(StartRouter, {\n            data: dataFn,\n            get children() {\n              return _$createComponent(Root, {});\n            }\n          });\n        }\n      });\n    }\n  });\n});","start":1675681830743,"end":1675681830743,"order":"normal"},{"name":"vite:import-analysis","result":"import { mergeProps as _$mergeProps } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { MetaProvider } from \"/node_modules/@solidjs/meta/dist/index.jsx?v=2963516b\";\nimport { Router } from \"/node_modules/@solidjs/router/dist/index.jsx?v=2963516b\";\n// @ts-ignore\nimport Root from \"/src/root.tsx?t=1675681830435\";\nimport { ServerContext } from \"/node_modules/solid-start/server/ServerContext.tsx?v=2963516b\";\nimport { FETCH_EVENT } from \"/node_modules/solid-start/server/types.tsx?v=2963516b\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({\n\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\nfunction throwClientError(field) {\n  throw new Error(`\"${field}\" is not available on the client. Use it within an \\`if (isServer)\\` block to ensure it only runs on the server`);\n}\nexport default (() => {\n  let mockFetchEvent = {\n    get request() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"request\");\n      }\n    },\n    get clientAddress() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"clientAddress\");\n      }\n    },\n    get locals() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"locals\");\n      }\n    },\n    get prevUrl() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"prevUrl\");\n      }\n    },\n    get responseHeaders() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"responseHeaders\");\n      }\n    },\n    get tags() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"tags\");\n      }\n    },\n    get env() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"env\");\n      }\n    },\n    get routerContext() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"routerContext\");\n      }\n    },\n    setStatusCode(code) {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"setStatusCode\");\n      }\n    },\n    getStatusCode() {\n      if (\"development\" === \"development\") {\n        return throwClientError(\"getStatusCode\");\n      }\n    },\n    $type: FETCH_EVENT,\n    fetch\n  };\n  function StartRouter(props) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(Root, {});\n      }\n    }));\n  }\n  return _$createComponent(ServerContext.Provider, {\n    value: mockFetchEvent,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get children() {\n          return _$createComponent(StartRouter, {\n            data: dataFn,\n            get children() {\n              return _$createComponent(Root, {});\n            }\n          });\n        }\n      });\n    }\n  });\n});","start":1675681830743,"end":1675681830746,"order":"normal"}]}
