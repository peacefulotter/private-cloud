{"resolvedId":"/home/edge/dev/js/private-cloud/src/components/Directory/Menu/Checkbox.tsx","transforms":[{"name":"__load__","result":"import { createEffect, createSignal, JSX } from \"solid-js\";\nimport useHover from \"~/hooks/useHover\";\n\ninterface ICheckbox {\n  \tonClick: (isChecked: boolean, e: unknown) => void;\n    className?: string;\n    checkedClass?: string;\n\tforceState?: boolean;\n    behaveAsButton?: boolean;\n    children?: (isChecked: boolean, hover: boolean) => JSX.Element; \n}\n\nexport default function Checkbox( { forceState, className, checkedClass, behaveAsButton, onClick, children } : ICheckbox ) \n{\n    const [isChecked, setChecked] = createSignal<boolean>(forceState || false)\t\n\tconst { hover, onMouseOver, onMouseOut } = useHover();\n\n    createEffect( () => {\n        if ( forceState === undefined ) return;\n        setChecked( forceState )\n    }, [forceState] )\n\n  \treturn (\n        <div \n            class={`${className} ${isChecked() ? checkedClass : ''}`}\n            onMouseOver={onMouseOver}\n            onMouseOut={onMouseOut}\n            onMouseDown={() => behaveAsButton && setChecked(true)}\n            onMouseUp={() => behaveAsButton && setChecked(false)}\n            onClick={e => { \t\n\t\t\t\tconst update = forceState !== undefined ? forceState : !isChecked;\t\n\t\t\t\tonClick( update, e ); \n\t\t\t\t!behaveAsButton && setChecked( update ); \n\t\t\t}}\n\t\t>\n\t\t\t{ children && children(isChecked(), hover()) }\n        </div>\n  \t);\n};","start":1675682060753,"end":1675682060753},{"name":"solid","result":"import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { className as _$className } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { runHydrationEvents as _$runHydrationEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { memo as _$memo } from \"solid-js/web\";\nimport { addEventListener as _$addEventListener } from \"solid-js/web\";\nimport { esm as _esm } from \"solid-refresh\";\nimport { shouldWarnAndDecline as _shouldWarnAndDecline } from \"solid-refresh\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div></div>`, 2);\nimport { createEffect, createSignal } from \"solid-js\";\nimport useHover from \"~/hooks/useHover\";\nexport const $$registrations = {};\nconst _Hot$$Checkbox = function Checkbox({\n  forceState,\n  className,\n  checkedClass,\n  behaveAsButton,\n  onClick,\n  children\n}) {\n  const [isChecked, setChecked] = createSignal(forceState || false);\n  const {\n    hover,\n    onMouseOver,\n    onMouseOut\n  } = useHover();\n  createEffect(() => {\n    if (forceState === undefined) return;\n    setChecked(forceState);\n  }, [forceState]);\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$);\n    _el$.$$click = e => {\n      const update = forceState !== undefined ? forceState : !isChecked;\n      onClick(update, e);\n      !behaveAsButton && setChecked(update);\n    };\n    _el$.$$mouseup = () => behaveAsButton && setChecked(false);\n    _el$.$$mousedown = () => behaveAsButton && setChecked(true);\n    _$addEventListener(_el$, \"mouseout\", onMouseOut, true);\n    _$addEventListener(_el$, \"mouseover\", onMouseOver, true);\n    _$insert(_el$, () => children && children(isChecked(), hover()));\n    _$effect(() => _$className(_el$, `${className} ${isChecked() ? checkedClass : ''}`));\n    _$runHydrationEvents();\n    return _el$;\n  })();\n};\n$$registrations._Hot$$Checkbox = {\n  component: _Hot$$Checkbox,\n  id: \"_Hot$$Checkbox\"\n};\nconst {\n  handler: _handler,\n  Component: _Component\n} = _esm($$registrations._Hot$$Checkbox, import.meta.hot);\nif (import.meta.hot) import.meta.hot.accept(_mod => {\n  _handler(_mod) && import.meta.hot.invalidate();\n});\nexport default _Component;\n;\nif (_shouldWarnAndDecline()) if (import.meta.hot) import.meta.hot.decline();\n_$delegateEvents([\"mouseover\", \"mouseout\", \"mousedown\", \"mouseup\", \"click\"]);","start":1675682060753,"end":1675682060765,"order":"pre"},{"name":"vite:import-analysis","result":"import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/Directory/Menu/Checkbox.tsx\");import { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { delegateEvents as _$delegateEvents } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { className as _$className } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { effect as _$effect } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { runHydrationEvents as _$runHydrationEvents } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { memo as _$memo } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { addEventListener as _$addEventListener } from \"/node_modules/.vite/deps/solid-js_web.js?v=2963516b\";\nimport { esm as _esm } from \"/@solid-refresh\";\nimport { shouldWarnAndDecline as _shouldWarnAndDecline } from \"/@solid-refresh\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<div></div>`, 2);\nimport { createEffect, createSignal } from \"/node_modules/.vite/deps/solid-js.js?v=2963516b\";\nimport useHover from \"/src/hooks/useHover.tsx\";\nexport const $$registrations = {};\nconst _Hot$$Checkbox = function Checkbox({\n  forceState,\n  className,\n  checkedClass,\n  behaveAsButton,\n  onClick,\n  children\n}) {\n  const [isChecked, setChecked] = createSignal(forceState || false);\n  const {\n    hover,\n    onMouseOver,\n    onMouseOut\n  } = useHover();\n  createEffect(() => {\n    if (forceState === undefined) return;\n    setChecked(forceState);\n  }, [forceState]);\n  return (() => {\n    const _el$ = _$getNextElement(_tmpl$);\n    _el$.$$click = e => {\n      const update = forceState !== undefined ? forceState : !isChecked;\n      onClick(update, e);\n      !behaveAsButton && setChecked(update);\n    };\n    _el$.$$mouseup = () => behaveAsButton && setChecked(false);\n    _el$.$$mousedown = () => behaveAsButton && setChecked(true);\n    _$addEventListener(_el$, \"mouseout\", onMouseOut, true);\n    _$addEventListener(_el$, \"mouseover\", onMouseOver, true);\n    _$insert(_el$, () => children && children(isChecked(), hover()));\n    _$effect(() => _$className(_el$, `${className} ${isChecked() ? checkedClass : ''}`));\n    _$runHydrationEvents();\n    return _el$;\n  })();\n};\n$$registrations._Hot$$Checkbox = {\n  component: _Hot$$Checkbox,\n  id: \"_Hot$$Checkbox\"\n};\nconst {\n  handler: _handler,\n  Component: _Component\n} = _esm($$registrations._Hot$$Checkbox, import.meta.hot);\nif (import.meta.hot) import.meta.hot.accept(_mod => {\n  _handler(_mod) && import.meta.hot.invalidate();\n});\nexport default _Component;\n;\nif (_shouldWarnAndDecline()) if (import.meta.hot) import.meta.hot.decline();\n_$delegateEvents([\"mouseover\", \"mouseout\", \"mousedown\", \"mouseup\", \"click\"]);","start":1675682060765,"end":1675682060768,"order":"normal"}]}
