{"resolvedId":"/home/edge/dev/js/private-cloud/src/requests/useFileService.ts","transforms":[{"name":"__load__","result":"\nimport useRequestsService from \"./useRequestsService\";\n\nimport { Explorer } from \"../types\";\n\n\nconst service = useRequestsService('/file/');\n\nconst FileService = {\n    upload: (data: FormData, onUploadProgress: (e: ProgressEvent) => void, cb?: () => void, err?: () => void) => {\n        console.error('TODO: UPLOAD DUPLICATE -> (resolveName before)');\n        service.post( 'upload', data, { onUploadProgress }, \n            // () => UploadingToast.complete().then( cb ),\n            // () => UploadingToast.error().then( err ) \n        )\n    },\n    \n    downloadOne: (pathname: string) => (name: string) => {\n        return fetch(pathname + name)\n            .then( res => res.blob() )\n            .then( service.downloadBlob )\n    },\n    \n    removeOne: (pathname: string, cb: (name: string) => void) => (name: string) => {\n        service.get( 'remove/one', { pathname, name }, \n            () => cb(name),\n            // () => alertError('Failed to remove ' + name) \n        )\n    },\n    \n    downloadMany: (pathname: string, explorer: Explorer) => () => { \n        service.get( 'download/many', { pathname, explorer }, service.downloadBlob, \n            () => null, /* alertError('Failed to prepare files to download') */\n            { responseType: 'blob' }\n        )\n    },\n    \n    removeSelected: (pathname: string, explorer: Explorer, cb: () => void) => () => {\n        service.get( 'remove/selected', { pathname, explorer }, \n            cb, \n            // () => alertError('Failed to remove files') \n        )\n    },\n}\n\nexport default FileService","start":1675682301443,"end":1675682301443},{"name":"vite:esbuild","result":"import useRequestsService from \"./useRequestsService\";\nconst service = useRequestsService(\"/file/\");\nconst FileService = {\n  upload: (data, onUploadProgress, cb, err) => {\n    console.error(\"TODO: UPLOAD DUPLICATE -> (resolveName before)\");\n    service.post(\n      \"upload\",\n      data,\n      { onUploadProgress }\n    );\n  },\n  downloadOne: (pathname) => (name) => {\n    return fetch(pathname + name).then((res) => res.blob()).then(service.downloadBlob);\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\n      \"remove/one\",\n      { pathname, name },\n      () => cb(name)\n    );\n  },\n  downloadMany: (pathname, explorer) => () => {\n    service.get(\n      \"download/many\",\n      { pathname, explorer },\n      service.downloadBlob,\n      () => null,\n      { responseType: \"blob\" }\n    );\n  },\n  removeSelected: (pathname, explorer, cb) => () => {\n    service.get(\n      \"remove/selected\",\n      { pathname, explorer },\n      cb\n    );\n  }\n};\nexport default FileService;\n","start":1675682301443,"end":1675682301445,"order":"normal"},{"name":"vite:import-analysis","result":"import useRequestsService from \"/src/requests/useRequestsService.ts\";\nconst service = useRequestsService(\"/file/\");\nconst FileService = {\n  upload: (data, onUploadProgress, cb, err) => {\n    console.error(\"TODO: UPLOAD DUPLICATE -> (resolveName before)\");\n    service.post(\n      \"upload\",\n      data,\n      { onUploadProgress }\n    );\n  },\n  downloadOne: (pathname) => (name) => {\n    return fetch(pathname + name).then((res) => res.blob()).then(service.downloadBlob);\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\n      \"remove/one\",\n      { pathname, name },\n      () => cb(name)\n    );\n  },\n  downloadMany: (pathname, explorer) => () => {\n    service.get(\n      \"download/many\",\n      { pathname, explorer },\n      service.downloadBlob,\n      () => null,\n      { responseType: \"blob\" }\n    );\n  },\n  removeSelected: (pathname, explorer, cb) => () => {\n    service.get(\n      \"remove/selected\",\n      { pathname, explorer },\n      cb\n    );\n  }\n};\nexport default FileService;\n","start":1675682301445,"end":1675682301445,"order":"normal"},{"name":"vite:esbuild","result":"import useRequestsService from \"./useRequestsService\";\nconst service = useRequestsService(\"/file/\");\nconst FileService = {\n  upload: (data, onUploadProgress, cb, err) => {\n    console.error(\"TODO: UPLOAD DUPLICATE -> (resolveName before)\");\n    service.post(\n      \"upload\",\n      data,\n      { onUploadProgress }\n    );\n  },\n  downloadOne: (pathname) => (name) => {\n    return fetch(pathname + name).then((res) => res.blob()).then(service.downloadBlob);\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\n      \"remove/one\",\n      { pathname, name },\n      () => cb(name)\n    );\n  },\n  downloadMany: (pathname, explorer) => () => {\n    service.get(\n      \"download/many\",\n      { pathname, explorer },\n      service.downloadBlob,\n      () => null,\n      { responseType: \"blob\" }\n    );\n  },\n  removeSelected: (pathname, explorer, cb) => () => {\n    service.get(\n      \"remove/selected\",\n      { pathname, explorer },\n      cb\n    );\n  }\n};\nexport default FileService;\n","start":1675682301444,"end":1675682301446,"order":"normal"},{"name":"vite:import-analysis","result":"import useRequestsService from \"/src/requests/useRequestsService.ts\";\nconst service = useRequestsService(\"/file/\");\nconst FileService = {\n  upload: (data, onUploadProgress, cb, err) => {\n    console.error(\"TODO: UPLOAD DUPLICATE -> (resolveName before)\");\n    service.post(\n      \"upload\",\n      data,\n      { onUploadProgress }\n    );\n  },\n  downloadOne: (pathname) => (name) => {\n    return fetch(pathname + name).then((res) => res.blob()).then(service.downloadBlob);\n  },\n  removeOne: (pathname, cb) => (name) => {\n    service.get(\n      \"remove/one\",\n      { pathname, name },\n      () => cb(name)\n    );\n  },\n  downloadMany: (pathname, explorer) => () => {\n    service.get(\n      \"download/many\",\n      { pathname, explorer },\n      service.downloadBlob,\n      () => null,\n      { responseType: \"blob\" }\n    );\n  },\n  removeSelected: (pathname, explorer, cb) => () => {\n    service.get(\n      \"remove/selected\",\n      { pathname, explorer },\n      cb\n    );\n  }\n};\nexport default FileService;\n","start":1675682301446,"end":1675682301446,"order":"normal"}]}
